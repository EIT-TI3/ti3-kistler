# (c) KJR

import p03MartinKistler as p03
import unittest


class Prak03Unit(unittest.TestCase):
    def testAufgabe1(self):
        print("Test zu Aufgabe 1")
        fn = "TESTcsv_803_172.csv"
        table_no2 = p03.read_data(fn)
        self.assertIsInstance(table_no2, dict)
        keys_no2 = list(table_no2.keys())
        self.assertTrue(len(keys_no2) == 3)
        self.assertTrue("date" in keys_no2)
        self.assertTrue("time" in keys_no2)
        self.assertTrue("value" in keys_no2)
        self.assertTrue(type(table_no2["date"]), list)
        self.assertTrue(type(table_no2["time"]), list)
        self.assertTrue(type(table_no2["value"]), list)
        self.assertEqual(len(table_no2["date"]), 52)
        self.assertEqual(len(table_no2["time"]), 52)
        self.assertEqual(len(table_no2["value"]), 52)
        self.assertEqual(table_no2["date"].count("12.04.2018"), 16)
        self.assertEqual(table_no2["date"].count("13.04.2018"), 24)
        self.assertEqual(table_no2["date"].count("14.04.2018"), 8)
        self.assertEqual(table_no2["date"].count("15.04.2018"), 4)
        self.assertEqual(table_no2["time"][0], '08:00')
        self.assertEqual(table_no2["time"][-1], '07:00')
        self.assertEqual(table_no2["time"][26], '10:00')
        self.assertEqual(int(table_no2["value"][0]), 31)
        self.assertEqual(int(table_no2["value"][-1]), 22)
        self.assertEqual(int(table_no2["value"][26]), 17)
        fn = "TESTcsv_803_132G.csv"
        table_fs = p03.read_data(fn, "fs")
        self.assertIsInstance(table_fs, dict)
        keys_fs = list(table_fs.keys())
        self.assertTrue(len(keys_fs) == 3)
        self.assertTrue("date" in keys_fs)
        self.assertTrue("time" in keys_fs)
        self.assertTrue("fs" in keys_fs)
        self.assertTrue(type(table_fs["date"]), list)
        self.assertTrue(type(table_fs["time"]), list)
        self.assertTrue(type(table_fs["fs"]), list)
        self.assertEqual(len(table_fs["date"]), 129)
        self.assertEqual(len(table_fs["time"]), 129)
        self.assertEqual(len(table_fs["fs"]), 129)
        self.assertEqual(table_fs["date"].count("09.04.2018"), 23)
        self.assertEqual(table_fs["date"].count("10.04.2018"), 24)
        self.assertEqual(table_fs["date"].count("11.04.2018"), 24)
        self.assertEqual(table_fs["date"].count("12.04.2018"), 24)
        self.assertEqual(table_fs["date"].count("13.04.2018"), 24)
        self.assertEqual(table_fs["date"].count("14.04.2018"), 10)
        self.assertEqual(table_fs["date"].count("15.04.2018"), 0)
        self.assertEqual(table_fs["time"][0], '01:00')
        self.assertEqual(table_fs["time"][-1], '09:00')
        self.assertEqual(table_fs["time"][65], '18:00')
        self.assertEqual(int(table_fs["fs"][0]), 21)
        self.assertEqual(int(table_fs["fs"][-1]), 18)
        self.assertEqual(int(table_fs["fs"][65]), 12)

    def testAufgabe2(self):
        print("Test zu Aufgabe 2")
        fn = "TESTcsv_803_172.csv"
        table_no2 = p03.read_data(fn, "no2")
        (laenge, mini, maxi, mittel) = p03.stats(table_no2, "no2")
        self.assertEqual(laenge, 52)
        self.assertEqual(mini, 10.0)
        self.assertEqual(maxi, 60.0)
        self.assertAlmostEqual(mittel, 23.807692307692307)
        fn = "TESTcsv_803_132G.csv"
        table_fs = p03.read_data(fn, "fs")
        (laenge, mini, maxi, mittel) = p03.stats(table_fs, "fs")
        self.assertEqual(laenge, 129)
        self.assertEqual(mini, 8.0)
        self.assertEqual(maxi, 49.0)
        self.assertAlmostEqual(mittel, 20.17829457364341)

    def testAufgabe3(self):
        print("Test zu Aufgabe 3")
        table = {"date": [], "time": [], "no2": [], "fs": []}
        p03.add_entry(table, "11.11.18", "10:15", "no2", "fs", 13, 14)
        p03.add_entry(table, "11.11.18", "10:16", "no2", "fs", 15, 16)
        p03.add_entry(table, "11.11.18", "10:17", "no2", "fs", 17, 18)
        self.assertListEqual(table["date"], ["11.11.18"]*3)
        self.assertListEqual(table["time"], ["10:15", "10:16", "10:17"])
        self.assertListEqual(table["no2"], [13, 15, 17])
        self.assertListEqual(table["fs"], [14, 16, 18])

    def testAufgabe4(self):
        print("Test zu Aufgabe 4")
        fn = "TESTcsv_803_172.csv"
        table_no2 = p03.read_data(fn, "no2")
        fn = "TESTcsv_803_132G.csv"
        table_fs = p03.read_data(fn, "fs")
        self.assertEqual(p03.check_time(table_no2, table_fs, 0, 1000), -1)
        self.assertEqual(p03.check_time(table_no2, table_fs, 1000, 1), 1)
        self.assertEqual(p03.check_time(table_no2, table_fs, 0, 0), 1)
        self.assertEqual(p03.check_time(table_no2, table_fs, 42, 128), -1)
        self.assertEqual(p03.check_time(table_no2, table_fs, 47, 126), 0)

    def testAufgabe5(self):
        print("Test zu Aufgabe 5")
        fn = "TESTcsv_803_172.csv"
        table_no2 = p03.read_data(fn, "no2")
        fn = "TESTcsv_803_132G.csv"
        table_fs = p03.read_data(fn, "fs")
        table_new = p03.merge(table_no2, table_fs)
        self.assertIsInstance(table_new, dict)
        keys_new = list(table_new.keys())
        self.assertTrue(len(keys_new) == 4)
        self.assertTrue("date" in keys_new)
        self.assertTrue("time" in keys_new)
        self.assertTrue("no2" in keys_new)
        self.assertTrue("fs" in keys_new)
        self.assertTrue(type(table_new["date"]), list)
        self.assertTrue(type(table_new["time"]), list)
        self.assertTrue(type(table_new["no2"]), list)
        self.assertTrue(type(table_new["fs"]), list)
        self.assertEqual(len(table_new["date"]), 133)
        self.assertEqual(len(table_new["time"]), 133)
        self.assertEqual(len(table_new["no2"]), 133)
        self.assertEqual(len(table_new["fs"]), 133)
        self.assertEqual(table_new["date"].count("09.04.2018"), 23)
        self.assertEqual(table_new["date"].count("10.04.2018"), 24)
        self.assertEqual(table_new["date"].count("11.04.2018"), 24)
        self.assertEqual(table_new["date"].count("12.04.2018"), 24)
        self.assertEqual(table_new["date"].count("13.04.2018"), 24)
        self.assertEqual(table_new["date"].count("14.04.2018"), 10)
        self.assertEqual(table_new["date"].count("15.04.2018"), 4)
        self.assertEqual(table_new["time"][0], '01:00')
        self.assertEqual(table_new["time"][-1], '07:00')
        self.assertEqual(table_new["time"][67], '20:00')
        self.assertEqual(table_new["no2"].count(None), 81)
        self.assertIsNone(table_new["no2"][0])
        self.assertIsNone(table_new["no2"][78])
        self.assertIsNone(table_new["no2"][-6])
        self.assertIsNone(table_new["no2"][-5])
        self.assertEqual(int(table_new["no2"][79]), 31)
        self.assertEqual(int(table_new["no2"][-1]), 22)
        self.assertEqual(table_new["fs"].count(None), 4)
        self.assertEqual(int(table_new["fs"][0]), 21)
        self.assertIsNone(table_new["fs"][-1])
        self.assertIsNone(table_new["fs"][-2])
        self.assertIsNone(table_new["fs"][-3])
        self.assertIsNone(table_new["fs"][-4])
        self.assertEqual(int(table_new["fs"][-5]), 18)

    def testAufgabe6(self):
        print("Test zu Aufgabe 6")
        fn = "TESTcsv_803_172.csv"
        table_no2 = p03.read_data(fn, "no2")
        fn = "TESTcsv_803_132G.csv"
        table_fs = p03.read_data(fn, "fs")
        table_new = p03.merge(table_no2, table_fs)
        (laenge, mini, maxi, mittel) = p03.stats(table_new, "no2")
        self.assertEqual(laenge, 52)
        self.assertEqual(mini, 10.0)
        self.assertEqual(maxi, 60.0)
        self.assertAlmostEqual(mittel, 23.807692307692307)
        (laenge, mini, maxi, mittel) = p03.stats(table_new, "fs")
        self.assertEqual(laenge, 129)
        self.assertEqual(mini, 8.0)
        self.assertEqual(maxi, 49.0)
        self.assertAlmostEqual(mittel, 20.17829457364341)


if __name__ == "__main__":
    unittest.main()
